{"meta":{"title":"CoderPwp","subtitle":"(*´▽｀)ノノ泥嚎，我是一只喷雾瓶！","description":"一名普通大学生的博客","author":"CoderPwp","url":"http://pwp.ink","root":"/"},"pages":[{"title":"404 Not Found：该页面似乎损坏","date":"2020-07-21T04:36:24.181Z","updated":"2020-07-21T04:36:24.174Z","comments":false,"path":"404.html","permalink":"http://pwp.ink/404.html","excerpt":"","text":""},{"title":"关于","date":"2020-07-16T20:57:10.000Z","updated":"2020-07-20T14:26:19.899Z","comments":true,"path":"about/index.html","permalink":"http://pwp.ink/about/index.html","excerpt":"","text":"@timeline{ 2018 年@item{ 未知の日我遗失了大部分记忆… } @item{ 09 月 07 日考入佛山大学，机电工程学院机械设计制造及自动化专业 } 2019 年@item{ 01 月 08 日我搭建了 PentestBox 的中文镜像站，p4st0r.org (已经失效 } @item{ 02 月 13 日我使用开源社区程序 Flarum 创建了 zhuran.org (助燃社区) } @item{ 03 月 07 日我的 Hexo 博客由 Archer 主题更换为 Indigo，同一天我注册了pwp.ink域名 } @item{ 03 月 10 日养了一只吞噬兽🐱，名字叫Rocket🚀，正式成为一名铲屎官。 } @item{ 11 月 01 日转专业至数学与大数据学院，数据科学与大数据技术专业 } }"},{"title":"目录","date":"2020-07-16T16:47:53.000Z","updated":"2020-07-16T13:44:38.654Z","comments":false,"path":"categories/index.html","permalink":"http://pwp.ink/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2020-07-16T16:47:43.000Z","updated":"2020-07-16T13:44:22.913Z","comments":false,"path":"tags/index.html","permalink":"http://pwp.ink/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"关闭 macOS(适用黑苹果) 开机跑代码、啰嗦模式","slug":"关闭-macOS-适用黑苹果-开机跑代码、啰嗦模式","date":"2020-09-05T15:24:36.000Z","updated":"2020-09-05T07:25:30.913Z","comments":true,"path":"2020/09/05/关闭-macOS-适用黑苹果-开机跑代码、啰嗦模式/","link":"","permalink":"http://pwp.ink/2020/09/05/%E5%85%B3%E9%97%AD-macOS-%E9%80%82%E7%94%A8%E9%BB%91%E8%8B%B9%E6%9E%9C-%E5%BC%80%E6%9C%BA%E8%B7%91%E4%BB%A3%E7%A0%81%E3%80%81%E5%95%B0%E5%97%A6%E6%A8%A1%E5%BC%8F/","excerpt":"黑苹果开机时 logo 突然变大，在``Clover Configurator` 下设置一下就好了","text":"黑苹果开机时 logo 突然变大，在``Clover Configurator` 下设置一下就好了，不过也只能让开机第一段 logo 变得和第二段一样大。 解决 1 1 2 解决 2如果你明明已经在config.plist里已经关闭了-v参数，开机还是出现跑代码，就请尝试打开终端输入下面的代码尝试。 1sudo nvram boot-args&#x3D;&quot;&quot; 参考[1] 黑苹果开机如何去掉跑码模式–终极解决方案, 小明和他的女朋友 [2] 请教Mac Mini怎么开启和关闭啰嗦模式, 约定20125","categories":[{"name":"转载","slug":"转载","permalink":"http://pwp.ink/categories/%E8%BD%AC%E8%BD%BD/"}],"tags":[{"name":"黑苹果","slug":"黑苹果","permalink":"http://pwp.ink/tags/%E9%BB%91%E8%8B%B9%E6%9E%9C/"},{"name":"logo 突然变大","slug":"logo-突然变大","permalink":"http://pwp.ink/tags/logo-%E7%AA%81%E7%84%B6%E5%8F%98%E5%A4%A7/"}]},{"title":"解决：无法删除Karabiner-Elements.app和Karabiner-EventViewer.app应用","slug":"解决：无法删除Karabiner-Elements-app和Karabiner-EventViewer-app应用","date":"2020-09-05T06:51:08.977Z","updated":"2020-09-05T06:59:39.348Z","comments":true,"path":"2020/09/05/解决：无法删除Karabiner-Elements-app和Karabiner-EventViewer-app应用/","link":"","permalink":"http://pwp.ink/2020/09/05/%E8%A7%A3%E5%86%B3%EF%BC%9A%E6%97%A0%E6%B3%95%E5%88%A0%E9%99%A4Karabiner-Elements-app%E5%92%8CKarabiner-EventViewer-app%E5%BA%94%E7%94%A8/","excerpt":"Karabiner-Elements 是一款 macOS 平台修改键位映射的开源程序，却发现无法卸载干净。","text":"Karabiner-Elements 是一款 macOS 平台修改键位映射的开源程序，却发现无法卸载干净。 介绍 解决1sudo &#39;&#x2F;Library&#x2F;Application Support&#x2F;org.pqrs&#x2F;Karabiner-Elements&#x2F;uninstall.sh&#39; 你也可以手动进入下面这个目录，看到uninstall.sh卸载脚本，记得用 root 权限 1&#x2F;Library&#x2F;Application Support&#x2F;org.pqrs 到这里，我就已经彻底卸载干净了。 参考[1] 删除Karabiner-Elements 和 Karabiner-EventViewer提示项目被锁定, the ache [2] Mac彻底删除Paragon NTFS for Mac和karabiner-Elements, BlueBlueSkyZ","categories":[{"name":"转载学习","slug":"转载学习","permalink":"http://pwp.ink/categories/%E8%BD%AC%E8%BD%BD%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"macOS","slug":"macOS","permalink":"http://pwp.ink/tags/macOS/"},{"name":"Karabiner-Elements.app","slug":"Karabiner-Elements-app","permalink":"http://pwp.ink/tags/Karabiner-Elements-app/"},{"name":"Karabiner-EventViewer.app","slug":"Karabiner-EventViewer-app","permalink":"http://pwp.ink/tags/Karabiner-EventViewer-app/"},{"name":"已锁定","slug":"已锁定","permalink":"http://pwp.ink/tags/%E5%B7%B2%E9%94%81%E5%AE%9A/"}]},{"title":"bash_arpspoof_未找到命令","slug":"bash_arpspoof_未找到命令","date":"2020-09-04T19:03:03.000Z","updated":"2020-09-05T07:06:24.252Z","comments":true,"path":"2020/09/05/bash_arpspoof_未找到命令/","link":"","permalink":"http://pwp.ink/2020/09/05/bash_arpspoof_%E6%9C%AA%E6%89%BE%E5%88%B0%E5%91%BD%E4%BB%A4/","excerpt":"在Kali Linux 系统下玩 ARP 欺骗的时候，遇到这个问题，bash: arpspoof：未找到命令","text":"在Kali Linux 系统下玩 ARP 欺骗的时候，遇到这个问题，bash: arpspoof：未找到命令 解决 arpspoof 是一款进行arp欺骗的工具，攻击者通过毒化受害者arp缓存，将网关mac替换为攻击者mac，然后攻击者可截获受害者发送和收到的数据包，可获取受害者账户、密码等相关敏感信息。 运行 arpspoof 命令时提示：arpspoof未找到命令 其原因是你还未安装 arpspoof 工具； arpspoof 是 dsniff 的一个附属工具，所以我们需要安装的是 dsniff ： 1apt-get install dsniff arpspoof安装成功 参考[1] arpspoof未找到命令解决方法, 完美代码","categories":[{"name":"转载","slug":"转载","permalink":"http://pwp.ink/categories/%E8%BD%AC%E8%BD%BD/"}],"tags":[{"name":"arpspoof","slug":"arpspoof","permalink":"http://pwp.ink/tags/arpspoof/"},{"name":"未找到命令","slug":"未找到命令","permalink":"http://pwp.ink/tags/%E6%9C%AA%E6%89%BE%E5%88%B0%E5%91%BD%E4%BB%A4/"}]},{"title":"解决macOS上Microsoft AutoUpdate更新太慢的问题","slug":"解决macOS上Microsoft-AutoUpdate更新太慢的问题","date":"2020-08-26T17:27:29.000Z","updated":"2020-08-26T16:25:41.701Z","comments":true,"path":"2020/08/27/解决macOS上Microsoft-AutoUpdate更新太慢的问题/","link":"","permalink":"http://pwp.ink/2020/08/27/%E8%A7%A3%E5%86%B3macOS%E4%B8%8AMicrosoft-AutoUpdate%E6%9B%B4%E6%96%B0%E5%A4%AA%E6%85%A2%E7%9A%84%E9%97%AE%E9%A2%98/","excerpt":"macOS 上 Microsoft Autoupdate 的更新速度实在太慢了，就连开了小飞机也是一样慢，不仅速度慢就算了，甚至还会更新到一半然后就失败了。","text":"macOS 上 Microsoft Autoupdate 的更新速度实在太慢了，就连开了小飞机也是一样慢，不仅速度慢就算了，甚至还会更新到一半然后就失败了。 解决办法直接官网进入(https://docs.microsoft.com/zh-cn/officeupdates/update-history-office-for-mac)下载 建议直接下载 Office 套件（不含 Teams） 不然的话你可能会遇到这种情况 我是直接用迅雷下载，省事儿速度快 这样更新再也不用烦恼微软更新的龟速了，而且也不用担心激活会失效","categories":[{"name":"原创","slug":"原创","permalink":"http://pwp.ink/categories/%E5%8E%9F%E5%88%9B/"}],"tags":[{"name":"macOS","slug":"macOS","permalink":"http://pwp.ink/tags/macOS/"},{"name":"Microsoft Autoupdate","slug":"Microsoft-Autoupdate","permalink":"http://pwp.ink/tags/Microsoft-Autoupdate/"},{"name":"更新问题","slug":"更新问题","permalink":"http://pwp.ink/tags/%E6%9B%B4%E6%96%B0%E9%97%AE%E9%A2%98/"}]},{"title":"「Playgrounds - 通关代码」学习编程 2，更新中","slug":"Playgrounds-通关代码-学习编程-2","date":"2020-08-16T17:15:36.000Z","updated":"2020-08-24T08:59:24.638Z","comments":true,"path":"2020/08/17/Playgrounds-通关代码-学习编程-2/","link":"","permalink":"http://pwp.ink/2020/08/17/Playgrounds-%E9%80%9A%E5%85%B3%E4%BB%A3%E7%A0%81-%E5%AD%A6%E4%B9%A0%E7%BC%96%E7%A8%8B-2/","excerpt":"(2020-08-16 22:54:24) 持续更新中","text":"(2020-08-16 22:54:24) 持续更新中 变量跟踪记录12345var gemCounter &#x3D; 0 moveForward()moveForward()collectGem()gemCounter &#x3D; 1 使值增大123456789var gemCounter &#x3D; 0while !isBlocked &#123; moveForward() if isOnGem &#123; collectGem() &#125; gemCounter +&#x3D; 1&#125; 使值递增1234567891011var gemCounter &#x3D; 0while !isBlocked || !isBlockedRight &#123; moveForward() if !isBlockedRight &#123; turnRight() &#125; if isOnGem &#123; collectGem() gemCounter +&#x3D; 1 &#125;&#125; 寻找七颗宝石1234567891011121314var gemCounter &#x3D; 0while gemCounter &lt; 7 &#123; if !isBlocked &#123; if isOnGem &#123; collectGem() gemCounter +&#x3D; 1 &#125; else &#123; moveForward() &#125; &#125; else &#123; turnLeft() turnLeft() &#125;&#125; 三颗宝石，四个开关123456789101112131415161718192021var gemCounter &#x3D; 0var toggleCounter &#x3D; 0while toggleCounter &lt; 4 &#123; if isBlocked &#123; if isBlockedLeft &#123; turnRight() &#125; else &#123; turnLeft() &#125; &#125; else &#123; if isOnGem &amp;&amp; gemCounter &lt; 3&#123; collectGem() gemCounter +&#x3D; 1 &#125; else if isOnClosedSwitch &#123; toggleSwitch() toggleCounter +&#x3D; 1 &#125; else &#123; moveForward() &#125; &#125;&#125; 检查等值123456789101112let switchCounter &#x3D; numberOfSwitchesvar gemCounter &#x3D; 0while gemCounter &lt; switchCounter &#123; if isOnGem &#123; collectGem() gemCounter +&#x3D; 1 &#125; if isBlocked &#123; turnRight() &#125; moveForward()&#125; 清点开关1234567891011121314151617181920var gemCounter &#x3D; 0 var switchCounter &#x3D; 0while (!isOnClosedSwitch) &#123; if isOnGem &#123; collectGem() gemCounter +&#x3D; 1 &#125; else if isBlocked &#123; turnRight() &#125; moveForward()&#125;while switchCounter &lt; gemCounter &#123; if isOnClosedSwitch &#123; toggleSwitch() switchCounter +&#x3D; 1 &#125; else if isBlocked &#123; turnRight() &#125; moveForward()&#125; 收集指定总数123456789101112131415let totalGems &#x3D; randomNumberOfGemsvar gemCounter &#x3D; 0while gemCounter &lt; totalGems &#123; if !isBlocked &#123; if isOnGem &#123; collectGem() gemCounter +&#x3D; 1 &#125; moveForward() &#125; else if isBlocked &amp;&amp; isBlockedRight&#123; turnLeft() &#125; else &#123; turnRight() &#125;&#125; 类型关闭传送门12345678910111213141516171819for i in 1 ... 2 &#123; moveForward()&#125;var closed_Switch &#x3D; 3greenPortal.isActive &#x3D; falsewhile closed_Switch !&#x3D; 0 &#123; moveForward() if isBlocked &#123; for i in 1 ... 2 &#123; turnRight() &#125; &#125; else if !isBlockedRight&#123; turnRight() &#125; if isOnClosedSwitch &#123; toggleSwitch() closed_Switch -&#x3D; 1 &#125;&#125; 开关传送门12345678910111213141516171819202122232425262728var gemNum &#x3D; 7var SwitchNum &#x3D; 1var turnRound &#x3D; 0while (gemNum !&#x3D;&#96; 0 || SwitchNum !&#x3D; 0) &#123; if turnRound%2&#x3D;&#x3D;0 &#123; purplePortal.isActive &#x3D; false &#125; if !isBlocked &#123; if isOnGem &#123; collectGem() gemNum -&#x3D; 1 &#125; else if isOnClosedSwitch &#123; toggleSwitch() SwitchNum -&#x3D; 1 &#125; moveForward() &#125; if isBlocked &#123; for i in 1 ... 2 &#123; turnRight() &#125; turnRound +&#x3D; 1 &#125; if turnRound%2&#x3D;&#x3D;1 &#123; purplePortal.isActive &#x3D; true &#125;&#125; 设定正确的传送门123456789101112131415161718192021222324var turnRound &#x3D; 0var gemNum &#x3D; 4while gemNum !&#x3D; 0 &#123; if turnRound%2&#x3D;&#x3D;0 &#123; bluePortal.isActive &#x3D; false pinkPortal.isActive &#x3D; false &#125; else &#123; bluePortal.isActive &#x3D; true pinkPortal.isActive &#x3D; true &#125; if !isBlocked &#123; if isOnGem &#123; collectGem() gemNum -&#x3D; 1 &#125; moveForward() &#125; else &#123; for i in 1 ... 2 &#123; turnRight() &#125; turnRound +&#x3D; 1 &#125;&#125; 世界四角12345678910111213141516171819202122232425262728293031var switchNum &#x3D; 0var gemNum &#x3D; 0var turnRound &#x3D; 0while switchNum !&#x3D; 6 || gemNum !&#x3D; 6 &#123; if !isBlockedRight &#123; turnRight() &#125; if turnRound%2 &#x3D;&#x3D; 0 &#123; greenPortal.isActive &#x3D; false orangePortal.isActive &#x3D; false &#125; else if turnRound%3 &#x3D;&#x3D; 0&#123; greenPortal.isActive &#x3D; true orangePortal.isActive &#x3D; true &#125; if !isBlocked &#123; if isOnGem &#123; collectGem() gemNum +&#x3D; 1 &#125; else if isOnClosedSwitch &#123; toggleSwitch() switchNum +&#x3D; 1 &#125; moveForward() &#125; if isBlocked &amp;&amp; isBlockedRight&#123; for i in 1 ... 2 &#123; turnRight() &#125; turnRound +&#x3D; 1 &#125;&#125; 随机宝石遍布各处12345678910111213141516171819202122232425var totalGems &#x3D; randomNumberOfGemsvar ActiveNum &#x3D; 0while totalGems !&#x3D; 0 &#123; if ActiveNum%2&#x3D;&#x3D;0 &#123; pinkPortal.isActive &#x3D; false bluePortal.isActive &#x3D; false &#125; else &#123; pinkPortal.isActive &#x3D; true bluePortal.isActive &#x3D; true &#125; if !isBlocked &#123; if isOnGem &#123; collectGem() totalGems -&#x3D; 1 &#125; moveForward() &#125; else &#123; for i in 1 ... 2 &#123; turnLeft() &#125; ActiveNum +&#x3D; 1 &#125; &#125; 初始化初始化你的专家12345678910111213141516171819202122232425262728293031let expert &#x3D; Expert()var gemNum &#x3D; 0var goNum &#x3D; 0var lockNum &#x3D; 0while gemNum !&#x3D; 3 &#123; if expert.isOnGem &#123; expert.collectGem() gemNum +&#x3D; 1 &#125; func go_HalfWay() &#123; for i in 1 ... 3 &#123; expert.moveForward() &#125; &#125; if !expert.isBlocked &#123; go_HalfWay() goNum +&#x3D; 1 if lockNum !&#x3D; 1 &#123; expert.turnLockUp() lockNum +&#x3D; 1 &#125; if goNum &#x3D;&#x3D; 4 &#123; expert.turnLeft() &#125; &#125; else &#123; for i in 1 ... 2 &#123; expert.turnLeft() &#125; &#125;&#125; 训练你的专家123456789101112expert.moveForward()expert.turnLockUp()character.moveForward()character.collectGem()character.moveForward()character.turnRight()character.moveForward()character.moveForward()expert.turnLockDown()expert.turnLockDown()character.moveForward()character.collectGem() 使用不同类型的实例123456789101112expert.moveForward()expert.turnLockUp()character.moveForward()character.collectGem()character.moveForward()character.turnRight()character.moveForward()character.moveForward()expert.turnLockDown()expert.turnLockDown()character.moveForward()character.collectGem() 需要两个搭档123456789101112131415161718192021222324252627282930313233343536let exper &#x3D; Expert()let character &#x3D; Character()var step &#x3D; 0while (step&lt;15) &#123; if expert.isBlocked &#123; if expert.isBlockedLeft &#123; expert.turnRight() &#125; else &#123; expert.turnLeft() &#125; &#125; else if !expert.isBlocked &#123; if step&#x3D;&#x3D;5 &#123; expert.turnLeft() expert.turnLockDown() expert.turnLockDown() expert.turnRight() expert.moveForward() step +&#x3D; 1 &#125; else if step&#x3D;&#x3D;15 &#123; expert.turnLeft() expert.turnLockUp() expert.turnRight() expert.moveForward() step +&#x3D; 1 &#125; else &#123; expert.moveForward() step +&#x3D; 1 &#125; &#125;&#125;character.moveForward()character.moveForward()character.collectGem()character.moveForward()character.moveForward()character.toggleSwitch()","categories":[{"name":"原创","slug":"原创","permalink":"http://pwp.ink/categories/%E5%8E%9F%E5%88%9B/"}],"tags":[{"name":"全章节答案","slug":"全章节答案","permalink":"http://pwp.ink/tags/%E5%85%A8%E7%AB%A0%E8%8A%82%E7%AD%94%E6%A1%88/"},{"name":"macOS","slug":"macOS","permalink":"http://pwp.ink/tags/macOS/"},{"name":"Playgrounds","slug":"Playgrounds","permalink":"http://pwp.ink/tags/Playgrounds/"},{"name":"通关代码","slug":"通关代码","permalink":"http://pwp.ink/tags/%E9%80%9A%E5%85%B3%E4%BB%A3%E7%A0%81/"},{"name":"Swift 编程","slug":"Swift-编程","permalink":"http://pwp.ink/tags/Swift-%E7%BC%96%E7%A8%8B/"}]},{"title":"「Playgrounds - 通关代码」学习编程 1","slug":"Playgrounds-通关代码-学习编程-1","date":"2020-08-06T09:43:53.000Z","updated":"2020-08-24T08:59:08.866Z","comments":true,"path":"2020/08/06/Playgrounds-通关代码-学习编程-1/","link":"","permalink":"http://pwp.ink/2020/08/06/Playgrounds-%E9%80%9A%E5%85%B3%E4%BB%A3%E7%A0%81-%E5%AD%A6%E4%B9%A0%E7%BC%96%E7%A8%8B-1/","excerpt":"macOS 上的 Playgrounds 的小游戏蛮好玩的，据说是拿来学习 苹果的编程语言 Swift 的，但说实话玩通这章没觉得学到啥，不过好玩就行了。","text":"macOS 上的 Playgrounds 的小游戏蛮好玩的，据说是拿来学习 苹果的编程语言 Swift 的，但说实话玩通这章没觉得学到啥，不过好玩就行了。 学习编程 1 通关截图 命令发出命令1234moveForward()moveForward()moveForward()collectGem() 添加新命令123456moveForward()moveForward()turnLeft()moveForward()moveForward()collectGem() 切换开关12345678910moveForward()moveForward()turnLeft()moveForward()collectGem()moveForward()turnLeft()moveForward()moveForward()toggleSwitch() 传送门练习1234567891011121314151617181920212223moveForward()moveForward()moveForward()turnLeft()moveForward()moveForward()toggleSwitch()moveForward()toggleSwitch()moveForward()turnLeft()moveForward()moveForward()collectGem()turnLeft()turnLeft()moveForward()moveForward()turnLeft()turnLeft()turnLeft()moveForward()moveForward() 发现并修复程序错误1234567moveForward()moveForward()turnLeft()moveForward()collectGem()moveForward()toggleSwitch() 消灭程序错误练习1234567891011121314151617181920212223242526272829303132333435363738394041moveForward()moveForward()moveForward()turnLeft()moveForward()moveForward()moveForward()moveForward()turnLeft()moveForward()moveForward()turnLeft()turnLeft()turnLeft()moveForward()moveForward()collectGem()turnLeft()turnLeft()moveForward()moveForward()turnLeft()moveForward()moveForward()turnLeft()turnLeft()turnLeft()moveForward()moveForward()turnLeft()turnLeft()turnLeft()moveForward()moveForward()toggleSwitch()turnLeft()moveForward()moveForward()turnLeft()moveForward()moveForward() 最短路线123456789101112moveForward()moveForward()moveForward()collectGem()moveForward()moveForward()moveForward()moveForward()toggleSwitch()moveForward()moveForward()moveForward() 函数组合新行为12345678910moveForward()moveForward()moveForward()turnLeft()turnLeft()turnLeft()moveForward()moveForward()moveForward()collectGem() 创建新函数1234567891011121314151617func turnRight() &#123; turnLeft() turnLeft() turnLeft()&#125;moveForward()turnLeft()moveForward()turnRight()moveForward()turnRight()moveForward()turnRight()moveForward()turnLeft()moveForward()toggleSwitch() 收集、切换、重复1234567891011121314151617func go_AHEAD() &#123; moveForward() collectGem() moveForward() toggleSwitch()&#125;go_AHEAD()moveForward()turnLeft()go_AHEAD()moveForward()moveForward()turnLeft()go_AHEAD()moveForward()turnLeft()go_AHEAD() 尽收囊中12345678910111213141516171819202122func forward_and_collect() &#123; collectGem() moveForward()&#125;forward_and_collect()forward_and_collect()func turnRight()&#123; turnLeft() turnLeft() turnLeft()&#125;turnRight()forward_and_collect()forward_and_collect()turnRight()forward_and_collect()forward_and_collect()turnRight()forward_and_collect()turnRight()forward_and_collect()collectGem() 嵌套模式12345678910111213141516171819func turnAround() &#123; turnLeft() turnLeft&#125;func solveStair() &#123; moveForward() collectGem()&#125;solveStair()turnAround()moveForward()solveStair()turnAround()moveForward()turnRight()solveStair()turnAround()moveForward()solveStair() 嵌入式阶梯12345678910111213141516171819202122func collectGemTurnAround() &#123; moveForward() moveForward() collectGem() turnLeft() turnLeft() moveForward() moveForward()&#125;func solveRow() &#123; collectGemTurnAround() collectGemTurnAround()&#125;solveRow()turnRight()moveForward()turnLeft()solveRow()turnRight()moveForward()turnLeft()solveRow() 寻宝123456789101112131415161718192021222324252627282930func moveThenToggle()&#123; moveForward() moveForward() toggleSwitch()&#125;func turnAround()&#123; turnLeft() turnLeft()&#125;func twoMoveForward()&#123; moveForward() moveForward()&#125;moveThenToggle()turnAround()twoMoveForward()moveThenToggle()turnAround()twoMoveForward()turnLeft()moveThenToggle()moveThenToggle()turnAround()twoMoveForward()twoMoveForward()moveThenToggle()moveThenToggle() For 循环使用循环123456for i in 1 ... 5 &#123; moveForward() moveForward() collectGem() moveForward()&#125; 循环每一侧12345678for i in 1 ... 4 &#123; moveForward() collectGem() moveForward() moveForward() moveForward() turnRight()&#125; 行至边缘再返回1234567891011121314151617181920212223242526272829for i in 1 ... 2 &#123; moveForward()&#125;toggleSwitch()turnLeft()for i in 1 ... 2 &#123; moveForward()&#125;turnLeft()for i in 1 ... 2 &#123; moveForward()&#125;toggleSwitch()for i in 1 ... 2 &#123; moveForward()&#125;turnLeft()for i in 1 ... 2 &#123; moveForward()&#125;toggleSwitch()for i in 1 ... 2 &#123; moveForward()&#125;turnLeft()for i in 1 ... 2 &#123; moveForward()&#125;toggleSwitch() 循环跳跃者123456789101112131415161718192021222324252627282930313233moveForward()turnLeft()for i in 1 ... 2 &#123; moveForward()&#125;collectGem()turnRight()moveForward()turnLeft()for i in 1 ... 2 &#123; moveForward()&#125;collectGem()turnRight()moveForward()turnLeft()for i in 1 ... 2 &#123; moveForward()&#125;collectGem()turnRight()moveForward()turnLeft()for i in 1 ... 2 &#123; moveForward()&#125;collectGem()turnRight()moveForward()turnLeft()moveForward()moveForward()collectGem() 拓展技能12345678910111213141516171819202122232425262728func turnDirection()&#123; for i in 1 ... 2 &#123; moveForward() &#125; turnRight()&#125;func turnAround() &#123; for i in 1 ... 2 &#123; turnLeft() &#125; &#125;func stepTask()&#123; for i in 1 ... 7 &#123; moveForward() &#125; toggleSwitch() turnAround() for i in 1 ... 7 &#123; moveForward() &#125;&#125;for i in 1 ... 3 &#123; turnDirection() stepTask() turnRight()&#125; 宝石农场123456789101112131415161718192021222324252627282930313233func taskProcess()&#123; turnRight() for i in 1 ... 2 &#123; moveForward() collectGem() &#125; func turnAround() &#123; turnLeft() turnLeft() &#125; turnAround() for i in 1 ... 2 &#123; moveForward() &#125; for i in 1 ... 2 &#123; moveForward() toggleSwitch() &#125; turnAround() for i in 1 ... 2 &#123; moveForward() &#125; func turnDirection() &#123; turnDirection() moveForward() &#125; turnLeft() moveForward()&#125;for i in 1 ... 3 &#123; taskProcess()&#125; 席卷四处12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364for i in 1 ... 2 &#123; moveForward() collectGem()&#125;func turnAround() &#123; for i in 1 ... 2 &#123; turnLeft() &#125;&#125;turnAround()moveForward()turnRight()moveForward()collectGem()turnAround()for i in 1 ... 2 &#123; moveForward()&#125;collectGem()moveForward()for i in 1 ... 2 &#123; moveForward() collectGem()&#125;turnAround()moveForward()turnRight()moveForward()collectGem()turnAround()for i in 1 ... 2 &#123; moveForward()&#125;collectGem()moveForward()for i in 1 ... 2 &#123; moveForward() collectGem()&#125;turnAround()moveForward()turnRight()moveForward()collectGem()turnAround()for i in 1 ... 2 &#123; moveForward()&#125;collectGem()moveForward()for i in 1 ... 2 &#123; moveForward() collectGem()&#125;turnAround()moveForward()turnRight()moveForward()collectGem()turnAround()for i in 1 ... 2 &#123; moveForward()&#125;collectGem() 条件代码检查开关1234567moveForward()for i in 1 ... 3 &#123; moveForward() if isOnClosedSwitch &#123; toggleSwitch() &#125;&#125; 使用 else if1234567891011for i in 1 ... 2 &#123; moveForward() if isOnClosedSwitch &#123; toggleSwitch() &#125; else if isOnGem &#123; collectGem() &#125;&#125; 循环条件代码123456789for i in 1 ... 2 &#123; moveForward() if isOnGem&#123; collectGem() &#125; else if isOnClosedSwitch&#123; toggleSwitch() &#125;&#125; 满足条件时向上爬12345678910111213func taskGem()&#123; for i in 1 ... 4 &#123; if isOnGem &#123; collectGem() &#125; else &#123; moveForward() &#125; &#125; turnLeft()&#125;for i in 1 ... 4 &#123; taskGem()&#125; 定义更巧妙的函数12345678910111213141516171819202122232425262728293031func collectOrToggle() &#123;if isOnClosedSwitch&#123; toggleSwitch() &#125; else if isOnGem&#123; collectGem() &#125;&#125;func twoSteps() &#123; for i in 1 ... 2 &#123; moveForward() &#125;&#125;for i in 1 ... 2 &#123; twoSteps() collectOrToggle()&#125;for i in 1 ... 2 &#123; turnLeft() twoSteps()&#125;collectGem()twoSteps()collectGem()turnRight()moveForward()turnRight()twoSteps()collectOrToggle()twoSteps()collectOrToggle() 围困其中123456789101112131415161718192021func isOnClosedSwitchOrGem()&#123; if isOnClosedSwitch&#123; toggleSwitch() &#125; else if isOnGem&#123; collectGem() &#125;&#125;moveForward()isOnClosedSwitchOrGem()turnRight()moveForward()isOnClosedSwitchOrGem()turnRight()for i in 1 ... 3 &#123; for i in 1 ... 2 &#123; moveForward() isOnClosedSwitchOrGem() &#125; turnRight()&#125; 决策树123456789101112131415161718192021222324252627282930313233343536373839404142434445for i in 1 ... 2 &#123; moveForward() collectGem() func GemOrSwitch() &#123; if isOnGem&#123; collectGem() &#125; else if isOnClosedSwitch&#123; toggleSwitch() &#125; &#125; func turnAround()&#123; for i in 1 ... 2 &#123; turnLeft() &#125; &#125; func longBridge() &#123; turnRight() for i in 1 ... 3 &#123; moveForward() &#125; turnLeft() moveForward() GemOrSwitch() turnAround() moveForward() turnRight() for i in 1 ... 3 &#123; moveForward() &#125; turnRight() &#125; longBridge() moveForward() GemOrSwitch() turnLeft() moveForward() GemOrSwitch() turnAround() moveForward() turnLeft() moveForward()&#125; 逻辑运算符使用“非”运算符12345678910111213141516171819202122232425func turnAround()&#123; for i in 1 ... 2 &#123; turnLeft() &#125; &#125;for i in 1 ... 4 &#123; moveForward() if !isOnGem&#123; turnLeft() for i in 1 ... 2 &#123; moveForward() &#125; collectGem() turnAround() for i in 1 ... 2 &#123; moveForward() &#125; turnLeft() &#125; else&#123; collectGem() &#125;&#125; 非之螺旋1234567for i in 1 ... 13 &#123; moveForward() if isBlocked&#123; turnLeft() &#125;&#125;toggleSwitch() 检查这个与那个12345678910111213141516171819202122232425262728293031for i in 1 ... 7 &#123; moveForward() if isOnGem &amp;&amp; !isBlockedLeft&#123; collectGem() &#125; else if isOnGem &amp;&amp; isBlockedLeft&#123; turnRight() for i in 1 ... 2 &#123; moveForward() &#125; func backLine()&#123; func turnAround()&#123; for i in 1 ... 2 &#123; turnLeft() &#125; &#125; turnAround() for i in 1 ... 2 &#123; moveForward() &#125; &#125; if isOnClosedSwitch&#123; toggleSwitch() &#125; backLine() if isOnGem &#123; collectGem() &#125; turnRight() &#125;&#125; 检查这个或那个1234567for i in 1 ... 12 &#123; moveForward() if isBlocked || isBlockedLeft&#123; turnRight() &#125;&#125;collectGem() 逻辑迷宫1234567891011121314151617181920212223242526272829303132333435for i in 1 ... 8 &#123; moveForward() if isOnGem &amp;&amp; isOnClosedSwitch&#123; collectGem() toggleSwitch() turnRight() for i in 1 ... 2 &#123; moveForward() &#125; collectGem() func turnAround()&#123; for i in 1 ... 2 &#123; turnRight() &#125; &#125; turnAround() for i in 1 ... 2 &#123; moveForward() &#125; turnRight() &#125; else if isBlocked &amp;&amp; isOnClosedSwitch&#123; toggleSwitch() turnLeft() &#125; else if isOnGem || isOnClosedSwitch&#123; if isOnGem&#123; collectGem() &#125; else if isOnClosedSwitch&#123; turnLeft() toggleSwitch() &#125; &#125;&#125; While 循环当…时运行代码1234while isOnCloseSwitch() &#123; toggleSwitch() moveForward()&#125; 创建更巧妙的 While 循环12345678910moveForward()while !isBlocked &#123; if isOnOpenSwitch &#123; moveForward() &#125; else&#123; toggleSwitch() moveForward() &#125;&#125; 正确选取工具12345678910func turnAndCollectGem() &#123; moveForward() turnLeft() moveForward() collectGem() turnRight()&#125;while !isBlocked &#123; turnAndCollectGem()&#125; 四乘以四123456789while !isBlocked &#123; moveForward() if isOnClosedSwitch &#123; toggleSwitch() &#125; if (isBlockedLeft || isBlocked) &amp;&amp; isOnOpenSwitch&#123; turnRight() &#125;&#125; 转身12345678910while !isBlocked &#123; moveForward() if isOnGem &amp;&amp; isBlocked&#123; collectGem() turnLeft() &#125; else if !isOnGem&#123; turnRight() &#125;&#125; 富饶之地123456789101112131415161718192021222324252627while !isBlocked &#123; moveForward() if isOnGem || isOnClosedSwitch&#123; if isOnGem&#123; collectGem() &#125; else if isOnClosedSwitch&#123; toggleSwitch() &#125; &#125; else if isBlocked&#123; if isBlockedLeft &#123; turnRight() moveForward() turnRight() &#125; else if isBlockedRight &#123; turnRight() &#125; else&#123; turnLeft() moveForward() turnLeft() &#125; &#125;&#125; 嵌套循环1234567while isOnGem || isBlockedLeft &#123; while isOnGemm &#123; turnLeft() collectGem() &#125; moveForward()&#125; 随机矩形1234567while !isBlocked&#123; moveForward() if isBlocked &#123; turnRight() &#125;&#125;toggleSwitch() 始终右转1234567891011121314while !isBlocked&#123; moveForward() if isOnClosedSwitch || isOnGem&#123; if isOnClosedSwitch&#123; toggleSwitch() &#125; else&#123; collectGem() &#125; &#125; else if isBlocked &amp;&amp; isBlockedLeft&#123; turnRight() &#125;&#125; 算法右手定则123456789101112131415161718192021func navigateAroundWall() &#123; if isBlockedRight&#123; moveForward() &#125; else &#123; turnRight() moveForward() &#125;&#125;while !isOnClosedSwitch&#123; navigateAroundWall() if isOnGem&#123; collectGem() func turnAround() &#123; for i in 1 ... 2 &#123; turnLeft() &#125; &#125; turnAround() &#125;&#125;toggleSwitch() 调整算法1234567891011121314151617181920212223242526272829303132func navigateAroundWall() &#123; if !isBlocked&#123; if isBlockedRight&#123; moveForward() &#125; else&#123; turnRight() moveForward() &#125; &#125; else if isBlocked&#123; if isBlockedRight &#123; turnLeft() moveForward() &#125; else&#123; turnRight() moveForward() &#125; &#125;&#125; while !isOnClosedSwitch &#123; navigateAroundWall() if isOnGem &#123; collectGem() turnLeft() turnLeft() &#125;&#125;toggleSwitch() 征服迷宫1234567891011121314151617181920while !isOnGem&#123; if !isBlocked&#123; moveForward() if isBlockedRight&#123; isBlockedLeft &#125; else if !isBlockedRight&#123; turnRight() &#125; &#125; else if isBlocked&#123; if isBlockedRight &#123; turnLeft() &#125; else&#123; turnRight() &#125; &#125;&#125;collectGem() 左转还是右转？12345678910111213141516while !isOnGem&#123; moveForward() if !isOnOpenSwitch&#123; if isOnClosedSwitch&#123; if !isBlocked&#123; toggleSwitch() turnRight() &#125; else&#123; toggleSwitch() turnLeft() &#125; &#125; &#125;&#125;collectGem() 向左走，向右走123456789101112131415161718192021222324252627while !isOnOpenSwitch&#123; if isOnGem || isOnClosedSwitch&#123; if isOnGem&#123; collectGem() &#125; else&#123; toggleSwitch() &#125; &#125; if isBlocked&#123; if isBlockedRight&#123; turnLeft() moveForward() &#125; else if isOnOpenSwitch &amp;&amp; isBlocked&#123; turnLeft() moveForward() &#125; else&#123; turnRight() moveForward() &#125; &#125; else&#123; moveForward() &#125;&#125;","categories":[{"name":"原创","slug":"原创","permalink":"http://pwp.ink/categories/%E5%8E%9F%E5%88%9B/"}],"tags":[{"name":"全章节答案","slug":"全章节答案","permalink":"http://pwp.ink/tags/%E5%85%A8%E7%AB%A0%E8%8A%82%E7%AD%94%E6%A1%88/"},{"name":"macOS","slug":"macOS","permalink":"http://pwp.ink/tags/macOS/"},{"name":"Swift编程","slug":"Swift编程","permalink":"http://pwp.ink/tags/Swift%E7%BC%96%E7%A8%8B/"},{"name":"Playgrounds","slug":"Playgrounds","permalink":"http://pwp.ink/tags/Playgrounds/"},{"name":"通关代码","slug":"通关代码","permalink":"http://pwp.ink/tags/%E9%80%9A%E5%85%B3%E4%BB%A3%E7%A0%81/"}]},{"title":"提示：'git push --help' 中的 'Note about fast-forwards' 小节。","slug":"提示：更新被拒绝，因为您当前分支的最新提交落后于其对应的远程分支","date":"2020-07-28T13:02:38.000Z","updated":"2020-08-06T09:49:57.546Z","comments":true,"path":"2020/07/28/提示：更新被拒绝，因为您当前分支的最新提交落后于其对应的远程分支/","link":"","permalink":"http://pwp.ink/2020/07/28/%E6%8F%90%E7%A4%BA%EF%BC%9A%E6%9B%B4%E6%96%B0%E8%A2%AB%E6%8B%92%E7%BB%9D%EF%BC%8C%E5%9B%A0%E4%B8%BA%E6%82%A8%E5%BD%93%E5%89%8D%E5%88%86%E6%94%AF%E7%9A%84%E6%9C%80%E6%96%B0%E6%8F%90%E4%BA%A4%E8%90%BD%E5%90%8E%E4%BA%8E%E5%85%B6%E5%AF%B9%E5%BA%94%E7%9A%84%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF/","excerpt":"本文关于解决如述 Git 上传问题及分析问题出现原因，且提供了两个解决方案来以此应对。","text":"本文关于解决如述 Git 上传问题及分析问题出现原因，且提供了两个解决方案来以此应对。 推荐方案 思路：先拉取远程仓库的代码文件到本地进行合并后，再推送到远程仓库优点：可以不干扰到他人的Commit logs(提交记录) 方案123git fetch origin master &#x2F;&#x2F; 下载远程 origin(起源) 仓库的 master(主) 分支到本地(假设你有多条分支在远程仓库上git merge origin&#x2F;master &#x2F;&#x2F; 假设你在本地 master 分支上，合并远程的 origin&#x2F;master 分支git push origin master &#x2F;&#x2F; 成功运行前两条，就可以顺利推送到远程仓库主分支了 fatal: 拒绝合并无关的历史 … 12git pull origin master --allow-unrelated-histories &#x2F;&#x2F; 允许拉取无关历史的远程仓库主分支文件到本地，并进行合并git push origin master &#x2F;&#x2F; 成功运行，就可以顺利推送到远程仓库主分支了 如果你担心，合并会不会覆盖掉我的一些文件或代码，那你需要了解以下知识[1] git分支合并把代码覆盖的问题 激进方案 使用自己本地仓库强制推送到远程仓库，若有重复的文件，将会使得本地文件强制覆盖远程文件，这将会导致你远程仓库上**其他人的提交记录(Commit logs)也全被覆盖清空。 方案1git push -f gitee master 强制推送 注意 推送后果 后果 如图，近 7 天里本来是有其他成员的提交记录，现在已经分支已经砍掉别人的记录，然后从我上一个提交记录开始接上[2]。 提交覆盖 分析原因模拟情景 你的项目是多人(或多设备)协作的，当你的团队成员(或其他设备)提交了新的文件代码，上传到(如) Gitee 平台 的远程仓库 hexo_Cache 的 master 主分支上，而你并没有选择先进行拉取合并其他人提交的工作，而选择直接上传你的到远程仓库分支上，就会出现如下报错： Gitee 平台提交报错 为此我特地尝试在我的另一台设备 Surface 上，提交一个测试文件到 Gitee 平台 的远程仓库 hexo_Cache 的 master 主分支上，然后在我另一台设备 Mibook 尝试直接上传，发现情况属实出现报错。而我选择上传到 GitHub 平台 的远程仓库 Origin 的 master 主分支上时，则显示成功上传（那是因为我事先并未在 GitHub 上有上传其他新的 (已提交的) 东西： GitHub 平台提交成功 参考链接1. OSCHINA - git分支合并把代码覆盖的问题？,malle0 ,彩阳 2. 百度经验 - GIT学习–(19) Git操作禁忌之git push -f, 爱做菜的技术宅","categories":[{"name":"原创、日常小麻烦","slug":"原创、日常小麻烦","permalink":"http://pwp.ink/categories/%E5%8E%9F%E5%88%9B%E3%80%81%E6%97%A5%E5%B8%B8%E5%B0%8F%E9%BA%BB%E7%83%A6/"}],"tags":[{"name":"提示：更新被拒绝，因为您当前分支...","slug":"提示：更新被拒绝，因为您当前分支","permalink":"http://pwp.ink/tags/%E6%8F%90%E7%A4%BA%EF%BC%9A%E6%9B%B4%E6%96%B0%E8%A2%AB%E6%8B%92%E7%BB%9D%EF%BC%8C%E5%9B%A0%E4%B8%BA%E6%82%A8%E5%BD%93%E5%89%8D%E5%88%86%E6%94%AF/"},{"name":"提示：再次推送前，先与远程变更合...","slug":"提示：再次推送前，先与远程变更合","permalink":"http://pwp.ink/tags/%E6%8F%90%E7%A4%BA%EF%BC%9A%E5%86%8D%E6%AC%A1%E6%8E%A8%E9%80%81%E5%89%8D%EF%BC%8C%E5%85%88%E4%B8%8E%E8%BF%9C%E7%A8%8B%E5%8F%98%E6%9B%B4%E5%90%88/"},{"name":"详见，提示：'git push —help’...","slug":"详见，提示：-git-push-—help’","permalink":"http://pwp.ink/tags/%E8%AF%A6%E8%A7%81%EF%BC%8C%E6%8F%90%E7%A4%BA%EF%BC%9A-git-push-%E2%80%94help%E2%80%99/"}]},{"title":"(原创) OpenCV3实现图像伪素描","slug":"OpenCV3实现图像伪素描","date":"2019-12-03T21:46:13.000Z","updated":"2020-08-06T09:47:33.144Z","comments":true,"path":"2019/12/04/OpenCV3实现图像伪素描/","link":"","permalink":"http://pwp.ink/2019/12/04/OpenCV3%E5%AE%9E%E7%8E%B0%E5%9B%BE%E5%83%8F%E4%BC%AA%E7%B4%A0%E6%8F%8F/","excerpt":"原标题《用Python做个海量小姐姐素描图》[1]，本文只介绍如何实现素描风格并贴出具体代码。","text":"原标题《用Python做个海量小姐姐素描图》[1]，本文只介绍如何实现素描风格并贴出具体代码。 背景介绍 今天刷手机看到微信公众号上这篇文章，感觉蛮有意思的，里面贴出了大致思路和相关的OpenCV2片段代码。然后秉着好奇的心就想来试试看，没想到真的成功啦，下面就直接贴出效果图和具体代码，注释做分析。 原图素材 原图 漫画风格 漫画 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051&#x2F;&#x2F;代码思路：彩色原图 &gt; 转化为灰度图 &gt; 均值滤波模糊处理 &gt; 自适应二值化为白底黑图#include &lt;iostream&gt;#include &lt;opencv2&#x2F;core&#x2F;core.hpp&gt;#include &lt;opencv2&#x2F;highgui&#x2F;highgui.hpp&gt;#include &lt;opencv2&#x2F;imgproc&#x2F;imgproc.hpp&gt;using namespace std;using namespace cv;int main()&#123; Mat srcImage &#x3D; imread(&quot;1.jpeg&quot;); if (!srcImage.data) &#123; cout &lt;&lt; &quot;读取图片错误，请重新输入正确路径！\\n&quot;; system(&quot;pause&quot;); return -1; &#125; imshow(&quot;ORIGINAL&quot;, srcImage); Mat srcGray; cvtColor(srcImage, srcGray, CV_RGB2GRAY); imshow(&quot;GRAY&quot;, srcGray); Mat tempImage; medianBlur(srcGray,tempImage,5); const int maxVal &#x3D; 255; &#x2F;&#x2F;初始化参数 int blockSize &#x3D; 3; &#x2F;&#x2F;取值3、5、7....等 int constValue &#x3D; 2; int adaptiveMethod &#x3D; 0; int thresholdType &#x3D; 0; &#x2F;* 自适应阈值算法 0:ADAPTIVE_THRESH_MEAN_C 1:ADAPTIVE_THRESH_GAUSSIAN_C -------------------------------------- 阈值类型 0:THRESH_BINARY 1:THRESH_BINARY_INV *&#x2F; Mat adapImage; adaptiveThreshold(tempImage, adapImage, maxVal, adaptiveMethod, thresholdType, blockSize, constValue); imshow(&quot;ADDAPTIVE&quot;, adapImage); imwrite(&quot;adap.jpeg&quot;,adapImage); waitKey(0); return 0;&#125; 写实风格 写实 12345678910111213141516171819202122232425262728293031&#x2F;&#x2F;代码思路：彩色原图 &gt; 转化为灰度图 &gt; 高斯滤波模糊处理 &gt; 灰度图与高斯图做个简单的减法#include &lt;iostream&gt;#include &lt;opencv2&#x2F;core&#x2F;core.hpp&gt;#include &lt;opencv2&#x2F;highgui&#x2F;highgui.hpp&gt;#include &lt;opencv2&#x2F;imgproc&#x2F;imgproc.hpp&gt;using namespace std;using namespace cv;int main()&#123; Mat srcImage &#x3D; imread(&quot;1.jpeg&quot;); &#x2F;&#x2F;载入图像 imshow(&quot;ORIGINAL&quot;,srcImage); Mat grayImage; cvtColor(srcImage, grayImage, CV_RGB2GRAY); imshow(&quot;GRAY&quot;,grayImage); Mat gaussImage; GaussianBlur(grayImage,gaussImage,Size(21,21),0,0); imshow(&quot;GAUSS&quot;,gaussImage); Mat dstImage; divide(grayImage,gaussImage,dstImage,255,-1); imshow(&quot;DST&quot;,dstImage); imwrite(&quot;DST.jpeg&quot;,dstImage); waitKey(0); return 0;&#125; 成功复现 成功 参考链接1. 用 Python 做个海量小姐姐素描图","categories":[{"name":"原创","slug":"原创","permalink":"http://pwp.ink/categories/%E5%8E%9F%E5%88%9B/"}],"tags":[{"name":"菜鸟学 Python，原作者大刘","slug":"菜鸟学-Python，原作者大刘","permalink":"http://pwp.ink/tags/%E8%8F%9C%E9%B8%9F%E5%AD%A6-Python%EF%BC%8C%E5%8E%9F%E4%BD%9C%E8%80%85%E5%A4%A7%E5%88%98/"},{"name":"OpenCV3，代码原创","slug":"OpenCV3，代码原创","permalink":"http://pwp.ink/tags/OpenCV3%EF%BC%8C%E4%BB%A3%E7%A0%81%E5%8E%9F%E5%88%9B/"},{"name":"均值滤波","slug":"均值滤波","permalink":"http://pwp.ink/tags/%E5%9D%87%E5%80%BC%E6%BB%A4%E6%B3%A2/"},{"name":"高斯滤波","slug":"高斯滤波","permalink":"http://pwp.ink/tags/%E9%AB%98%E6%96%AF%E6%BB%A4%E6%B3%A2/"},{"name":"自适应阈值化","slug":"自适应阈值化","permalink":"http://pwp.ink/tags/%E8%87%AA%E9%80%82%E5%BA%94%E9%98%88%E5%80%BC%E5%8C%96/"}]}],"categories":[{"name":"转载","slug":"转载","permalink":"http://pwp.ink/categories/%E8%BD%AC%E8%BD%BD/"},{"name":"转载学习","slug":"转载学习","permalink":"http://pwp.ink/categories/%E8%BD%AC%E8%BD%BD%E5%AD%A6%E4%B9%A0/"},{"name":"原创","slug":"原创","permalink":"http://pwp.ink/categories/%E5%8E%9F%E5%88%9B/"},{"name":"原创、日常小麻烦","slug":"原创、日常小麻烦","permalink":"http://pwp.ink/categories/%E5%8E%9F%E5%88%9B%E3%80%81%E6%97%A5%E5%B8%B8%E5%B0%8F%E9%BA%BB%E7%83%A6/"}],"tags":[{"name":"黑苹果","slug":"黑苹果","permalink":"http://pwp.ink/tags/%E9%BB%91%E8%8B%B9%E6%9E%9C/"},{"name":"logo 突然变大","slug":"logo-突然变大","permalink":"http://pwp.ink/tags/logo-%E7%AA%81%E7%84%B6%E5%8F%98%E5%A4%A7/"},{"name":"macOS","slug":"macOS","permalink":"http://pwp.ink/tags/macOS/"},{"name":"Karabiner-Elements.app","slug":"Karabiner-Elements-app","permalink":"http://pwp.ink/tags/Karabiner-Elements-app/"},{"name":"Karabiner-EventViewer.app","slug":"Karabiner-EventViewer-app","permalink":"http://pwp.ink/tags/Karabiner-EventViewer-app/"},{"name":"已锁定","slug":"已锁定","permalink":"http://pwp.ink/tags/%E5%B7%B2%E9%94%81%E5%AE%9A/"},{"name":"arpspoof","slug":"arpspoof","permalink":"http://pwp.ink/tags/arpspoof/"},{"name":"未找到命令","slug":"未找到命令","permalink":"http://pwp.ink/tags/%E6%9C%AA%E6%89%BE%E5%88%B0%E5%91%BD%E4%BB%A4/"},{"name":"Microsoft Autoupdate","slug":"Microsoft-Autoupdate","permalink":"http://pwp.ink/tags/Microsoft-Autoupdate/"},{"name":"更新问题","slug":"更新问题","permalink":"http://pwp.ink/tags/%E6%9B%B4%E6%96%B0%E9%97%AE%E9%A2%98/"},{"name":"全章节答案","slug":"全章节答案","permalink":"http://pwp.ink/tags/%E5%85%A8%E7%AB%A0%E8%8A%82%E7%AD%94%E6%A1%88/"},{"name":"Playgrounds","slug":"Playgrounds","permalink":"http://pwp.ink/tags/Playgrounds/"},{"name":"通关代码","slug":"通关代码","permalink":"http://pwp.ink/tags/%E9%80%9A%E5%85%B3%E4%BB%A3%E7%A0%81/"},{"name":"Swift 编程","slug":"Swift-编程","permalink":"http://pwp.ink/tags/Swift-%E7%BC%96%E7%A8%8B/"},{"name":"Swift编程","slug":"Swift编程","permalink":"http://pwp.ink/tags/Swift%E7%BC%96%E7%A8%8B/"},{"name":"提示：更新被拒绝，因为您当前分支...","slug":"提示：更新被拒绝，因为您当前分支","permalink":"http://pwp.ink/tags/%E6%8F%90%E7%A4%BA%EF%BC%9A%E6%9B%B4%E6%96%B0%E8%A2%AB%E6%8B%92%E7%BB%9D%EF%BC%8C%E5%9B%A0%E4%B8%BA%E6%82%A8%E5%BD%93%E5%89%8D%E5%88%86%E6%94%AF/"},{"name":"提示：再次推送前，先与远程变更合...","slug":"提示：再次推送前，先与远程变更合","permalink":"http://pwp.ink/tags/%E6%8F%90%E7%A4%BA%EF%BC%9A%E5%86%8D%E6%AC%A1%E6%8E%A8%E9%80%81%E5%89%8D%EF%BC%8C%E5%85%88%E4%B8%8E%E8%BF%9C%E7%A8%8B%E5%8F%98%E6%9B%B4%E5%90%88/"},{"name":"详见，提示：'git push —help’...","slug":"详见，提示：-git-push-—help’","permalink":"http://pwp.ink/tags/%E8%AF%A6%E8%A7%81%EF%BC%8C%E6%8F%90%E7%A4%BA%EF%BC%9A-git-push-%E2%80%94help%E2%80%99/"},{"name":"菜鸟学 Python，原作者大刘","slug":"菜鸟学-Python，原作者大刘","permalink":"http://pwp.ink/tags/%E8%8F%9C%E9%B8%9F%E5%AD%A6-Python%EF%BC%8C%E5%8E%9F%E4%BD%9C%E8%80%85%E5%A4%A7%E5%88%98/"},{"name":"OpenCV3，代码原创","slug":"OpenCV3，代码原创","permalink":"http://pwp.ink/tags/OpenCV3%EF%BC%8C%E4%BB%A3%E7%A0%81%E5%8E%9F%E5%88%9B/"},{"name":"均值滤波","slug":"均值滤波","permalink":"http://pwp.ink/tags/%E5%9D%87%E5%80%BC%E6%BB%A4%E6%B3%A2/"},{"name":"高斯滤波","slug":"高斯滤波","permalink":"http://pwp.ink/tags/%E9%AB%98%E6%96%AF%E6%BB%A4%E6%B3%A2/"},{"name":"自适应阈值化","slug":"自适应阈值化","permalink":"http://pwp.ink/tags/%E8%87%AA%E9%80%82%E5%BA%94%E9%98%88%E5%80%BC%E5%8C%96/"}]}