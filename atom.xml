<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CoderPwp</title>
  
  <subtitle>(*´▽｀)ノノ泥嚎，我是一只喷雾瓶！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://pwp.ink/"/>
  <updated>2020-07-28T13:46:19.281Z</updated>
  <id>http://pwp.ink/</id>
  
  <author>
    <name>CoderPwp</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>OpenCV3实现图像伪素描</title>
    <link href="http://pwp.ink/2020/07/29/[%E5%8E%9F%E5%88%9B.]%20OpenCV3%E5%AE%9E%E7%8E%B0%E5%9B%BE%E5%83%8F%E4%BC%AA%E7%B4%A0%E6%8F%8F/"/>
    <id>http://pwp.ink/2020/07/29/[%E5%8E%9F%E5%88%9B.]%20OpenCV3%E5%AE%9E%E7%8E%B0%E5%9B%BE%E5%83%8F%E4%BC%AA%E7%B4%A0%E6%8F%8F/</id>
    <published>2020-07-28T21:46:13.000Z</published>
    <updated>2020-07-28T13:46:19.281Z</updated>
    
    <content type="html"><![CDATA[<p><strong>原标题《用Python做个海量小姐姐素描图》<sup><a href='#参考链接'>[1]</a></sup>，本文只介绍如何实现素描风格并贴出具体代码。</strong></p><h1 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h1><blockquote><p>今天刷手机看到微信公众号上这篇文章，感觉蛮有意思的，里面贴出了大致思路和相关的OpenCV2片段代码。然后秉着好奇的心就想来试试看，没想到真的成功啦，下面就直接贴出效果图和具体代码，注释做分析。</p></blockquote><h1 id="原图素材"><a href="#原图素材" class="headerlink" title="原图素材"></a>原图素材</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="18C571A6-7438-44CE-8C01-C63A0AC0B3C3.png" alt="原图" title="">                </div>                <div class="image-caption">原图</div>            </figure><h1 id="漫画风格"><a href="#漫画风格" class="headerlink" title="漫画风格"></a>漫画风格</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="99EB47FF-31FB-4D6D-BFD9-2D065FC3FD19.png" alt="漫画" title="">                </div>                <div class="image-caption">漫画</div>            </figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;代码思路：彩色原图 &gt; 转化为灰度图 &gt; 均值滤波模糊处理 &gt; 自适应二值化为白底黑图</span><br><span class="line"></span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;opencv2&#x2F;core&#x2F;core.hpp&gt;</span><br><span class="line">#include &lt;opencv2&#x2F;highgui&#x2F;highgui.hpp&gt;</span><br><span class="line">#include &lt;opencv2&#x2F;imgproc&#x2F;imgproc.hpp&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">using namespace cv;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    Mat srcImage &#x3D; imread(&quot;1.jpeg&quot;);</span><br><span class="line">    if (!srcImage.data)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; &quot;读取图片错误，请重新输入正确路径！\n&quot;;</span><br><span class="line">        system(&quot;pause&quot;);</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">    imshow(&quot;ORIGINAL&quot;, srcImage);</span><br><span class="line">    </span><br><span class="line">    Mat srcGray;</span><br><span class="line">    cvtColor(srcImage, srcGray, CV_RGB2GRAY);</span><br><span class="line">    imshow(&quot;GRAY&quot;, srcGray);</span><br><span class="line"></span><br><span class="line">    Mat tempImage;</span><br><span class="line">    medianBlur(srcGray,tempImage,5);</span><br><span class="line"></span><br><span class="line">    const int maxVal &#x3D; 255;     &#x2F;&#x2F;初始化参数</span><br><span class="line">    int blockSize &#x3D; 3; &#x2F;&#x2F;取值3、5、7....等</span><br><span class="line">    int constValue &#x3D; 2;</span><br><span class="line">    int adaptiveMethod &#x3D; 0;</span><br><span class="line">    int thresholdType &#x3D; 0;</span><br><span class="line">    &#x2F;*</span><br><span class="line">        自适应阈值算法</span><br><span class="line">        0:ADAPTIVE_THRESH_MEAN_C</span><br><span class="line">        1:ADAPTIVE_THRESH_GAUSSIAN_C</span><br><span class="line">        --------------------------------------</span><br><span class="line">        阈值类型</span><br><span class="line">        0:THRESH_BINARY</span><br><span class="line">        1:THRESH_BINARY_INV</span><br><span class="line">    *&#x2F;</span><br><span class="line"></span><br><span class="line">    Mat adapImage;</span><br><span class="line">    adaptiveThreshold(tempImage, adapImage, maxVal, adaptiveMethod, thresholdType, blockSize, constValue);</span><br><span class="line"></span><br><span class="line">    imshow(&quot;ADDAPTIVE&quot;, adapImage);</span><br><span class="line">    imwrite(&quot;adap.jpeg&quot;,adapImage);</span><br><span class="line"></span><br><span class="line">    waitKey(0);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="写实风格"><a href="#写实风格" class="headerlink" title="写实风格"></a>写实风格</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="FC9959D0-51D0-4E69-9039-7C1534B52FFD.png" alt="写实" title="">                </div>                <div class="image-caption">写实</div>            </figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;代码思路：彩色原图 &gt; 转化为灰度图 &gt; 高斯滤波模糊处理 &gt; 灰度图与高斯图做个简单的减法</span><br><span class="line"></span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;opencv2&#x2F;core&#x2F;core.hpp&gt;</span><br><span class="line">#include &lt;opencv2&#x2F;highgui&#x2F;highgui.hpp&gt;</span><br><span class="line">#include &lt;opencv2&#x2F;imgproc&#x2F;imgproc.hpp&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">using namespace cv;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    Mat srcImage &#x3D; imread(&quot;1.jpeg&quot;);    &#x2F;&#x2F;载入图像</span><br><span class="line">    imshow(&quot;ORIGINAL&quot;,srcImage);</span><br><span class="line"></span><br><span class="line">    Mat grayImage;  </span><br><span class="line">    cvtColor(srcImage, grayImage, CV_RGB2GRAY);</span><br><span class="line">    imshow(&quot;GRAY&quot;,grayImage);</span><br><span class="line"></span><br><span class="line">    Mat gaussImage;</span><br><span class="line">    GaussianBlur(grayImage,gaussImage,Size(21,21),0,0);</span><br><span class="line">    imshow(&quot;GAUSS&quot;,gaussImage);</span><br><span class="line"></span><br><span class="line">    Mat dstImage;</span><br><span class="line">    divide(grayImage,gaussImage,dstImage,255,-1);</span><br><span class="line"></span><br><span class="line">    imshow(&quot;DST&quot;,dstImage);</span><br><span class="line">    imwrite(&quot;DST.jpeg&quot;,dstImage);</span><br><span class="line"></span><br><span class="line">    waitKey(0); </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="成功复现"><a href="#成功复现" class="headerlink" title="成功复现"></a>成功复现</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="5166FCDE-8495-43C1-987F-6BE06CBB8247.png" alt="成功](https://coderpwp.gitee.io/2019/12/03/OpenCV3%E5%AE%9E%E7%8E%B0%E5%9B%BE%E5%83%8F%E4%BC%AA%E7%B4%A0%E6%8F%8F/SUCCESS.png)![5166FCDE-8495-43C1-987F-6BE06CBB8247" title="">                </div>                <div class="image-caption">成功](https://coderpwp.gitee.io/2019/12/03/OpenCV3%E5%AE%9E%E7%8E%B0%E5%9B%BE%E5%83%8F%E4%BC%AA%E7%B4%A0%E6%8F%8F/SUCCESS.png)![5166FCDE-8495-43C1-987F-6BE06CBB8247</div>            </figure>参考链接<p><em>1. <a href="https://mp.weixin.qq.com/s/JIPdPBCurXMTcaPprWuZvw" target="_blank" rel="noopener">用 Python 做个海量小姐姐素描图</a></em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;原标题《用Python做个海量小姐姐素描图》&lt;sup&gt;&lt;a href=&#39;#参考链接&#39;&gt;[1]&lt;/a&gt;&lt;/sup&gt;，本文只介绍如何实现素描风格并贴出具体代码。&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;背景介绍&quot;&gt;&lt;a href=&quot;#背景介绍&quot; class=&quot;
      
    
    </summary>
    
    
      <category term="原创" scheme="http://pwp.ink/categories/%E5%8E%9F%E5%88%9B/"/>
    
    
  </entry>
  
  <entry>
    <title>提示：&#39;git push --help&#39; 中的 &#39;Note about fast-forwards&#39; 小节。</title>
    <link href="http://pwp.ink/2020/07/28/%E6%8F%90%E7%A4%BA%EF%BC%9A%E6%9B%B4%E6%96%B0%E8%A2%AB%E6%8B%92%E7%BB%9D%EF%BC%8C%E5%9B%A0%E4%B8%BA%E6%82%A8%E5%BD%93%E5%89%8D%E5%88%86%E6%94%AF%E7%9A%84%E6%9C%80%E6%96%B0%E6%8F%90%E4%BA%A4%E8%90%BD%E5%90%8E%E4%BA%8E%E5%85%B6%E5%AF%B9%E5%BA%94%E7%9A%84%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF/"/>
    <id>http://pwp.ink/2020/07/28/%E6%8F%90%E7%A4%BA%EF%BC%9A%E6%9B%B4%E6%96%B0%E8%A2%AB%E6%8B%92%E7%BB%9D%EF%BC%8C%E5%9B%A0%E4%B8%BA%E6%82%A8%E5%BD%93%E5%89%8D%E5%88%86%E6%94%AF%E7%9A%84%E6%9C%80%E6%96%B0%E6%8F%90%E4%BA%A4%E8%90%BD%E5%90%8E%E4%BA%8E%E5%85%B6%E5%AF%B9%E5%BA%94%E7%9A%84%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF/</id>
    <published>2020-07-28T13:02:38.000Z</published>
    <updated>2020-07-28T12:50:44.649Z</updated>
    
    <content type="html"><![CDATA[<p>本文关于解决如述 Git 上传问题及分析问题出现原因，且提供了两个解决方案来以此应对。<a id="more"></a></p><h1 id="推荐方案"><a href="#推荐方案" class="headerlink" title="推荐方案"></a>推荐方案</h1><blockquote><p>思路：先拉取远程仓库的代码文件到本地进行合并后，再推送到远程仓库<br>优点：可以不干扰到他人的Commit logs(提交记录)</p></blockquote><h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin master &#x2F;&#x2F; 下载远程 origin(起源) 仓库的 master(主) 分支到本地(假设你有多条分支在远程仓库上</span><br><span class="line">git merge origin&#x2F;master &#x2F;&#x2F; 假设你在本地 master 分支上，合并远程的 origin&#x2F;master 分支</span><br><span class="line">git push origin master  &#x2F;&#x2F; 成功运行前两条，就可以顺利推送到远程仓库主分支了</span><br></pre></td></tr></table></figure><p><strong>fatal: 拒绝合并无关的历史 …</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git pull origin master --allow-unrelated-histories &#x2F;&#x2F; 允许拉取无关历史的远程仓库主分支文件到本地，并进行合并</span><br><span class="line">git push origin master  &#x2F;&#x2F; 成功运行，就可以顺利推送到远程仓库主分支了</span><br></pre></td></tr></table></figure><p><strong>如果你担心，合并会不会覆盖掉我的一些文件或代码，那你需要了解以下知识<sup><a href='#参考链接'>[1]</a></sup></strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="image-20200728140813997.png" alt="git分支合并把代码覆盖的问题" title="">                </div>                <div class="image-caption">git分支合并把代码覆盖的问题</div>            </figure><h1 id="激进方案"><a href="#激进方案" class="headerlink" title="激进方案"></a>激进方案</h1><blockquote><p>使用自己本地仓库强制推送到远程仓库，若有重复的文件，将会使得本地文件强制覆盖远程文件，这将会导致你远程仓库上**其他人的提交记录(Commit logs)也全被覆盖清空。</p></blockquote><h2 id="方案-1"><a href="#方案-1" class="headerlink" title="方案"></a>方案</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -f gitee master</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="image-20200728130614356.png" alt="强制推送" title="">                </div>                <div class="image-caption">强制推送</div>            </figure><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="image-20200728132646172.png" alt="推送后果" title="">                </div>                <div class="image-caption">推送后果</div>            </figure><h2 id="后果"><a href="#后果" class="headerlink" title="后果"></a>后果</h2><blockquote><p>如图，近 7 天里本来是有其他成员的提交记录，现在已经分支已经<strong>砍掉别人的记录</strong>，然后从我上一个提交记录开始接上<sup><a href='#参考链接'>[2]</a></sup>。</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="image-20200728133834579.png" alt="提交覆盖" title="">                </div>                <div class="image-caption">提交覆盖</div>            </figure><h1 id="分析原因"><a href="#分析原因" class="headerlink" title="分析原因"></a>分析原因</h1><h2 id="模拟情景"><a href="#模拟情景" class="headerlink" title="模拟情景"></a>模拟情景</h2><blockquote><p>你的项目是多人(或多设备)协作的，当你的团队成员(或其他设备)提交了新的文件代码，上传到(如) <strong>Gitee 平台</strong> 的远程仓库 hexo_Cache 的 master 主分支上，而<strong>你并没有选择</strong>先进行<strong>拉取合并</strong>其他人提交的工作，而选择直接上传你的到远程仓库分支上，就会出现如下报错：</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="image-20200728143620518.png" alt="Gitee 平台提交报错" title="">                </div>                <div class="image-caption">Gitee 平台提交报错</div>            </figure><blockquote><p>为此我特地尝试在我的另一台设备 Surface 上，提交一个测试文件到 <strong>Gitee 平台</strong> 的远程仓库 hexo_Cache 的 master 主分支上，然后在我另一台设备 Mibook 尝试直接上传，发现情况属实出现报错。而我选择上传到 <strong>GitHub 平台</strong> 的远程仓库 Origin 的 master 主分支上时，则显示<strong>成功上传</strong>（那是因为我事先并未在 GitHub 上有上传其他新的 (已提交的) 东西：</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="image-20200728144448745.png" alt="GitHub 平台提交成功" title="">                </div>                <div class="image-caption">GitHub 平台提交成功</div>            </figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><em>1. <a href="https://www.oschina.net/question/1394955_2303361" target="_blank" rel="noopener">OSCHINA - git分支合并把代码覆盖的问题？,malle0 ,彩阳</a></em></p><p><em>2. <a href="https://jingyan.baidu.com/article/b24f6c829d560ec6bee5da50.html" target="_blank" rel="noopener">百度经验 - GIT学习–(19) Git操作禁忌之git push -f, 爱做菜的技术宅</a></em></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文关于解决如述 Git 上传问题及分析问题出现原因，且提供了两个解决方案来以此应对。
    
    </summary>
    
    
      <category term="日常小麻烦" scheme="http://pwp.ink/categories/%E6%97%A5%E5%B8%B8%E5%B0%8F%E9%BA%BB%E7%83%A6/"/>
    
    
      <category term="提示：更新被拒绝，因为您当前分支..." scheme="http://pwp.ink/tags/%E6%8F%90%E7%A4%BA%EF%BC%9A%E6%9B%B4%E6%96%B0%E8%A2%AB%E6%8B%92%E7%BB%9D%EF%BC%8C%E5%9B%A0%E4%B8%BA%E6%82%A8%E5%BD%93%E5%89%8D%E5%88%86%E6%94%AF/"/>
    
      <category term="提示：再次推送前，先与远程变更合..." scheme="http://pwp.ink/tags/%E6%8F%90%E7%A4%BA%EF%BC%9A%E5%86%8D%E6%AC%A1%E6%8E%A8%E9%80%81%E5%89%8D%EF%BC%8C%E5%85%88%E4%B8%8E%E8%BF%9C%E7%A8%8B%E5%8F%98%E6%9B%B4%E5%90%88/"/>
    
      <category term="详见，提示：&#39;git push —help’..." scheme="http://pwp.ink/tags/%E8%AF%A6%E8%A7%81%EF%BC%8C%E6%8F%90%E7%A4%BA%EF%BC%9A-git-push-%E2%80%94help%E2%80%99/"/>
    
  </entry>
  
  <entry>
    <title>博客已经实现文章加密功能，插件 hexo-blog-encrypt</title>
    <link href="http://pwp.ink/2019/01/13/%E5%8D%9A%E5%AE%A2%E5%B7%B2%E7%BB%8F%E5%AE%9E%E7%8E%B0%E6%96%87%E7%AB%A0%E5%8A%A0%E5%AF%86%E5%8A%9F%E8%83%BD%EF%BC%8C%E6%B5%8B%E8%AF%95%E5%AF%86%E7%A0%81%E4%B8%BAencryptPages/"/>
    <id>http://pwp.ink/2019/01/13/%E5%8D%9A%E5%AE%A2%E5%B7%B2%E7%BB%8F%E5%AE%9E%E7%8E%B0%E6%96%87%E7%AB%A0%E5%8A%A0%E5%AF%86%E5%8A%9F%E8%83%BD%EF%BC%8C%E6%B5%8B%E8%AF%95%E5%AF%86%E7%A0%81%E4%B8%BAencryptPages/</id>
    <published>2019-01-12T20:25:37.000Z</published>
    <updated>2020-07-20T13:36:22.151Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">您好, 这里需要密码</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="844673f793d8acc8005b6365f66803977d0357aebe586f471961f0719c0a3424">49f270193126bd0aca44f8a8784dc8a3ceaf07bdc9359737ff6396b70922d77788c720ccc7e4decbb484df6b61ac6e5cd037a206e34b8f3f17884fb7949ba95dd8178b8ab36667277169a503017a15b44bebd2f686fa97482b56c1a04e4df7a4944a54e989629cf87bf54ab3eb30c4520d661fa5e0f525506cfaab9d4abaca42b79635a36cf859dec8e7f43be486102fe4dd4ee58f7723e03d77783cc43ffab08247aeda810c423c7d1a1f7223a5f6eac0982baa815fc7a9b7028c397585bd0de10e894fb6467ad271d10fa5123a2586075757487428c643f357bb53c0cc4c63633a314e71c3ea8b53afd1422a7c11b0291711484f82d5686d8b951c3b32ce25b7d08af8e139e617797e294de062a97defec5835897ff39f6d8d5c5db48b0de9224d6594f9c5c053f3238f630f2e9207bbbe87f9bbebfc24212ac567bd90451ce69ea1ac28618da0102c2432a02cf65ba28a1c25aef86041a5fef7f4254ba5e9100745be8fd229e5317b27373f9bfe70e127eb56b163c71477dbdfd5dd2f34b0246d1e5d7de793b11675d861182f56171f7ed7081d7b5685b85cbe8485095e6737751b074bfe095f8b912f0045902abbd8eceb8458031229ed10f7ef4852bf6356bd660c7af85ed503ca00c6bb80de21a8ac030fe31f53ebdafb2b2055f1c289da8e0fdc869181c2cbef4ec8a17b9749d41f9267fe2880044892ee54238198a421731212734deb15de699e195d5d7dc9fdeb7b34dd950a12228efadc94ecb63b6854479aa500fafdaa6c52a48d54a915ee1a673d58faeb6689f018f2f1ca5f9fa7162eca4833f95350464b100458a6665b22dcc75b23dae24eb83bd3ac82743071122b3f6a7a5194f5576012bdc53ddb40536794ed3a777b01cbe4e58e100ef6a13fa98ca2fda1a36cdf615d8126c733c9fdc204c7f9bd5722ecae7c35b07456735e664b61acc9778a3456264dd6a6449def151e9a0fdec884e200a01de49e94d85ff598a44706ccde0db447d74cc0b9f0182b7689c46fae09b2092c815cab4b8d487175b684d764e695fa4455dabba061a44d08982f87ace9a0c27fc2ca6d5b177e1e972fde4bb91c37522384653b255b57b5af7225ae00a36082973f4a071f5a2d006159f05526ea8eca58f98b5dbfee8d02c2442cd158ef87885e7ce294e28448dce19545dd8eabfe62f6067dc36b92230b06fe45041d0673dd3dc870bc3925070d24df97143740e278a3fa159807839910b954853161c3737db2c9ebd81de1dd0b2c7a39d517ba3028a5a7d7afb689b89b5d3bc6ffe1ac1ba0196a4302a457abc67326430b09dbbe2e66421f429e3117ee8f681bd7f1f31e46b2b6389fc580150da635c0851a845e479f7839af797a02bc78118fc874bfda37a8e12c0c06e7176d89b89158321c322003aa0e8ebe21c84c7426c289cafb23126cdf201ef46abe7b08d251eaf0772b3c6c9737c7d517c6a6cc93921ffb0e8210c62a9e3bd74b2a9d559ce0e6f5649c9bfa9f2177b088857b9b4316665d9385d7c6f624cbac07858aca9afbe3f36d46d1ca8421d2c6dde1be4d14f9137118a37757cdfd5b569aeb9121e7f56a32c8f053e75c80cbe3488cecfe601645cac929f9041ea834183659ec3c360389a6fe57d5e0505efe8a025623ffec5d044306dcd24efadcc2b9ed47a576fda6f5b91317bfe31cdb664dfbe68294fc2ae5558aebb0fcd635d032619009fc5d0d5f8a1749625b0a28d98530a9c0171dac81355c4580c3ffdfa6b99929b3bedee59f58c72db7e80f07ac90a0adae3abea9dfacaff4b7cdfb2ddacfa06892e63d8df3f6a90ca25eef30e3cca52d18dfe1a7bd6762a8a01760d47b10c80a1bc1b08c5a13f2a40f8941ee28670b0c86a825cc8f78e3d31d35bc96614faf15b43fed0a39a0ac3f87c8847f2d19885fe6005aed59c7bafafce5b5e1dd4e0ba4f4df76391cd8ca26be5603455177d4e296cb946e9d90169e90c63917ef341facb044b81c313f6758bc768b7faa0768f5a15fbf5d69620d89b7e127c2b90e68611d57a20fd194b12311969434f3622c86f521c7fd49fa26cfe0f96ab4cbb625f2f1a42a34b64b430ae9db58740c29bed2524f290aa5d008b23da56f1e8097c6b6343a435b6d9bfe0e353868b61f4830432b67ad76bbae39f596be4bf52c94068a4d00f9e8e46ee544d1607e5416b4a73d8a17a0e5b3efef59479ec0ad099e39988c6b4e7caadeec57210a486755ae7d0240e535fb26d2e14ee5b39a02577e418ab9aab88165d9550b8cf882866b7dfdd7380ec10fe642a487871c17fbe886a52f10e0627b192f2adb822ffc82d61f02d98c6101dc08b97663db5a9ffb15a912b12bcd9d989990e39f3fa16d6db7ace9da561f7c475cf6d01181704080590cf522a60198ab5533bbccf9ac8d2b7b4f8d8bc49843b70d855ddf08c1ed8c65ff812cbddd2859196da972e9752fc3be703e34d77cf84d0d6d71e93179a23b8a8ed456b92fc3fe1feff690d49a9a4fb0071e398b50c95e365b8f0aedaedff9179fe5869b90ffe99c111738b5949e9ee612abcd0aea4114fe93e86c2a5d35737f6556731c33e581ad7d8c0e272f7ddd0221a6ee8939dfbfc03738adf1ac40e7d86f800ec9f71f9ae433e8cab87d036b77c6d587f33fa1db547cc5f049e53dcf58f688ac83974660fc4408a68478bcb4d87aab7e25205b9bc8530c4ca23a079185ad3b412166a18135a1337446cba8eeace0bd2796774cec6a8c45d63bde8b9b0035533eaf1d8cbe4b4df86415e7b263644e0d704f40b1ce5503b66dc8b51737047ac813359794dfd1663f5f2c7c8f2b9cd8839e08a017e5e4cf68e0cc3864d5019fade6987e058c8f31efee6c5fe24527c4f99d9472ba53b77185037280544ff8c00df4d05f29b4428ad45eb845cd8b9fb1a133ae51de7df16cb604e6928d0f7ca94aefcfaa0d3a3b3d0eb2ca22d61a094f68f075962e2c0e8ebd4d4084907e2818789fd9efb3b1504655e5bfc53698cbf0fafdb8ba42340a05764d6dcadd0f919bd01ab5682e804764146aaabc38c9fc258bfedfdf78305d18217c0b7358e1e4cf48386fba6b96318f2986fe947c06284fe319432e42f3b116fa12c79c73b56a949cb10503e90dc11bb58b02de8592c5b04a0f48397e785dd1eeac557597dc0f448c8f069643f806adf8a32858ce45bd87d22ad87425cd98c4e11e55cd9644d020b0e0d4057548cfaefe205e71856aede46761986d91ff094500f54be1ffe826231d7236c868ab7098a74778f4697fa15e9ebda34640f0fb06dc71be76560235bfad6d52f57d442cf04471ad3f825cce7ba3812ab7102a077e9482cb1e59211dfa98521c46378914f5ad7a34c1eb0249afafbf0aba41a41671b4379673e1082522ea6272bbf27cc2c60e46e2ac77273a5dd5f25a40eb59c1f1f59e75722da596d887c4f1102079adee9483284ec75f92957d845110361d981fdbdc7cb3133d72f5655dd60d0209847ecf8d8bd7e9a70dbbb28363be8b3cd634b13dadd3fdbedd45e89d61b157036fd6656f7eaab846e2c77bdea58f31d4f42fc0fbb7286de10294cda984891fec94c4e5a685e6208f2dc98d9f85469843cb455b7973309845dd7f13a8fa78118197aec6a5bfb531f4940a0b4250afee7dd079414e1718bc29c4ec90c3dabaa7cdb0bde6e1d6f52a64240cd5048bb85c152d7861ddd451b1aeab9fc5ad1c0e60e9a8f0ec012ac4b4507e97ec6b1882070f61820816faf999a9dadc8a3f358077aeb84ffe861bddaec111438e8da22220b185971ce198e6f9ba6588509aa9ec81f44510cd96a31d3ed3541fd990283a61e6370f8a70ebd5e84cf8d41a17f23a0691e4f11439f712cc2da9aa1467436a259cd4b74b963593519b5fbaa8123e9c9fb57ef39d481be8510161fbf5109d8b90ece2c6475de842cfe09e2f1cb505937310bbc406355981a6435ec5f76649fa7764cf4091d17f0c05d1fa220354c17e2a94b411c24976317439788b83163a5cb65bc6ef997197d65a36c6c50d6bd412eb1caa922f43b950c2dc03f13ad346bb0c100793c8c59f972ce98506c86a3fa11310d0b58950bc66642f692dcc055f71a4af8815394e186082c096a3824eb1aabdf08cbdfd370a6dcabb2e8f5751f09b044c9e986288de84cc28c6e795eca1103d7fb641fb05d263ac8e5d44ba692e10d118e40ee2fd30983959a6f1f9e1204bd8970ffacebaaf991013807457f0acf5796172e9f258164ea9c8b3274728b1d3ba86390ecf04e40fa7c886f2e96aa8f0c57a7ec816f21cd227354474a8da80879780469d0b335e54b5964135abe4fc6080274f68c4871f69a354b596ea74a527d742b4fffb2eb7864eed1aa02117a09241a8fb3c9fe0194a0bf5e4aefbbb6dc39e3027b2cfc8477d4b8eefc767dfd3421804955d48146920dc5dd9c343796aff82ccc2af8bc5e679952a0256470e38f136e31c89cdcec692235bd8f5473cc480594751faa68aace68c9d1d8644eeaf220df44ad75895c52e0936d96c122bcb640201870404575edff235fd6265edf00ce45bd1540a72135c7428b0ceae444f0c858f5ef8237d859476d46e1f61b097c35defae00a6d1ca1bd4458c6f97917f4bf5e3db07b64be211c93dfb899fbc1425e98fe7c103a08b2d3db2876a0c479927f7b90f2a01cbca3527a5d9ec2b82fbad73e400e5ee2979ddbbce2b74ae9c8294f4e121cf681b4ec801a429ae2faafd64f8655b92507767fc513ce41e38bf24642168e8007544c074233f04d3c8d6e72e054758cc632b5b8193d7f85d26f8048a4cea4ff229f0326c1cb0da1a9da2ad32fc248643003d9e00be0f0180a7a2c314c8e2004acafbc4629a2b3ca74a22a84256cea7067c15e6e2c6e32e5f9fdfffe4dab6757af9887602281f5e525457df1270ee8685d001fec58911a0c148a8d6a771b115cf49cb96ff0c90e2e70504f4fb37772d603eafb23fa5682a01bc425f2afa1c61177bbd81f69ce6fcc8ecfdfa5a4a84c81aead8d926ec4fe563e75aae64795dbf13f6962e156229db6bf7a57f1a3bc448b260c4f13b13c697d9208f2cfdc35a42ebaf7501c9c60ddbc8a3ab763d6eb2553eb747652897ce5c6bddb149bf0c3278bc25d1fc3fa2d3413217185e0c8c2c83fc4303841d48e45238bd419a4decfb055cb67752b155f25a969849b4d5094aea574075503d2f8c45c0e07de19c4d03bcba72d314940a0d1d2c9309715203dd60195278f9ab2c5aec7bc61576a6e7e37717d2098628da7ffa9c66d394610c30d76af408b8e929ae291abaca2f40ab077af535b58360144fd7ab60ca3b195dcf33a2613d03013af2d13443980ee37ec8657fc94fca3ce56916f7011dd0a84c7b8b8d2c125a40cdc0dbff846ef9786cfb80ea28f55e83cc9e5cd215c3125760fc2b919360d5a3aedc4fb2951e2770d4e34ab310a599677feaa8c250d72fa90d28959502cb31e755c0bbd31eed42a7dbc858ae7fd0a44ddf091a55b3885599587b4a53f998e0c89f70053fb509446d1803acfc006c5b854e6bfd2f818f646d03dee0aa0568765d2237567d4844404589a9ddf35488ecc4cba3fe2044d089a546fd85848ddb0ffdaafcde148e6fe1cde617d5a983f304127b2cbba36db1fa7ac1450ff8b0257b1ff145afac742946b8ecbeda9a2f7df2377c1bdd0c9812080c92e79aeeb1dc392e048cfc48655e7a227fe04e795ab134cc098c0bfb51c29aceeca9fcc85d17d6f0b13646d10ca0f749b07e7838792228fe9a2f10fb7b9efdcb0dae8153643af6a4f31f5c5672dfba324ad6ab4a3bd697c92017441cedc8444765f837dda8427676aec46ff75959e370fa905c5e1bb54b6fe70cc576fec80692350bbc2215c6806d484ea2b6b48f02db402c4b91646c01bfff505410b70653f03e993a4104de0ef5fe742ddc5631420ad6bb4458ed0c2f1d4d2c8f0c6d39e779dcc31fbd170186232a1fe59ca1a10dd715b4024bf3c6b8c99d859c5f93b4511c241bb5202ff8c09fe0c79222b86e886d2f6f0ae4a46d7fe032006fe71690fb3ab18943bfebd4dd05247be4e7401bc2c1395548427ad6d080946d0929</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      这是篇机密文章, 请输入密码查看
    
    </summary>
    
    
      <category term="日常小麻烦" scheme="http://pwp.ink/categories/%E6%97%A5%E5%B8%B8%E5%B0%8F%E9%BA%BB%E7%83%A6/"/>
    
    
      <category term="HEXO 文章加密插件" scheme="http://pwp.ink/tags/HEXO-%E6%96%87%E7%AB%A0%E5%8A%A0%E5%AF%86%E6%8F%92%E4%BB%B6/"/>
    
      <category term="hexo-blog-encrypt" scheme="http://pwp.ink/tags/hexo-blog-encrypt/"/>
    
  </entry>
  
</feed>
